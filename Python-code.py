# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vJzUcZC5uo-3PL9eN_Gsz6ZkSNd4aPNo
"""

import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():


    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')

    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    citys = ['chicago', 'new york city', 'washington']
    print("Chicago - New York City - Washington")
    while True:
      city = input("What city do you want to see its data?  ").lower()
      if city in citys:
        break
      else:
        city = input("There is no city with that name, try again ").lower()

    # TO DO: get user input for month (all, january, february, ... , june)
    months = ['all', 'january', 'february', 'march', 'april', 'may', 'june']
    print("january - february - march - april - may - june - all")
    while True:
      month = input('In wich month?  ').lower()
      if month in months:
        break
      else:
        month = input("This month is not exist, try again ").lower()

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    days = ['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    print("monday - tuesday - wednesday - thursday - friday - saturday - sunday - all")
    while True:
      day = input('In wich day?  ').lower()
      if day in days:
        break
      else:
        day = input("This day is not exist, try again ").lower()


    print('-'*40)
    return city, month, day


def load_data(city, month, day):



    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    #Load data for city
    df = pd.read_csv(CITY_DATA[city])

    #Convert the Start Time column to datetime and create new columns
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day'] = df['Start Time'].dt.day_name()

    # filter by month
    if month != 'all':
      month = month.index(month) + 1
      df = df[df['month'] == month]
      month = ['january', 'february', 'march', 'april', 'may', 'june']

    # filter by day of week
    if day != 'all':
      df = df[df['day'] == day.title()]
    return df


def time_stats(df):




    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    the_most_common_month = df['month'].mode()[0]
    print('The Most Common Month IS:', the_most_common_month)

    # TO DO: display the most common day of week
    the_most_common_day = df['day'].mode()[0]
    print('The Most Common Day IS:', the_most_common_day)

    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    the_most_common_hour = df['hour'].mode()[0]
    print('The Most Common Hour IS:', the_most_common_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):



    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    start_stat = df['Start Station'].mode()[0]
    print('Most Commonly used Start Station is :', start_stat)

    # TO DO: display most commonly used end station
    end_stat = df['End Station'].mode()[0]
    print('Most Commonly used end station is :', end_stat)

    # TO DO: display most frequent combination of start station and end station trip
    Combination_Stat = df.groupby(['Start Station', 'End Station']).count()
    print('\nmost frequent combination of start station and end station trip is:', start_stat, " and ", end_stat)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):



    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
    print('Total Travel Time : ', total_travel_time)

    # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    print('Mean Travel Time : ', mean_travel_time)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):



    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_types = df['User Type'].value_counts()
    print(user_types)

    # TO DO: Display counts of gender
    try:
      count_gender = df['Gender'].value_counts()
      print(count_gender)
    except:
      print("There are no details about gender.")

    # TO DO: Display earliest, most recent, and most common year of birth
    try:
        earliest_year = int(df['Birth Year'].min())
        most_recent_year = int(df['Birth Year'].max())
        most_common_year = int(df['Birth Year'].mode()[0])
        print("\nThe earliest year of birth: {} \
        \nThe most recent year of birth: {}\
        \nThe most common year of birth: {}\
        ".format(earliest_year, most_recent_year, most_common_year))
    except:
        print("There are no birth year details.")


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def display_data(df):
    start_loc = 0
    while True:
        view_data = input(
            "Would you like to view 5 rows of individual trip data? Enter yes or no?: ").lower()
        if (view_data == 'yes'):
            print(df.iloc[start_loc: start_loc+5])
            start_loc += 5
        else:
            break


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_data(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
    main()